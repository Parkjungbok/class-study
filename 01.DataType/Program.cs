namespace _01.DataType
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*******************************************************************
            * 자료형 Data Type
            *******************************************************************/


            // 논리형-
            // bool         논리자료형         1byte          ture, false

            // 정수형-
            // byte         부호없는정수형     1byte           0 ~ 255
            // sbyte        부호있는정수형     1byte           -128 ~ 127

            // short        부호있는 정수형    2byte           -2^15 ~ 2^15 - 1     =>  -32,768 ~ 32,767 
            // int          부호있는 정수형    4byte           -2^31 ~ 2^31 - 1     =>  -2,147,483,648 ~ 2,147,483,647
            // long         부호있는 정수형    8byte           -2^63 ~ 2^63 - 1     =>  -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807

            // ushort       부호있는 정수형    2byte           0 ~ 2^16 - 1         =>   0 ~ 65,535
            // uint         부호있는 정수형    4byte           0 ~ 2^32 - 1         =>   0 ~ 4,294,967,295
            // ulong        부호있는 정수형    8byte           0 ~ 2^64 - 1         =>   0 ~ 18,446,744,073,709,551,615

            // 실수형-                                                                     
            // float        부동소수점 실수    4byte           3.4e-38  ~ 3.4e+38   =>  약 소수점 7자리
            // double       부동소수점 실수    8byte           1.7e-308 ~ 1.7e+308  =>  약 소수점 15자리

            // 문자형 - 
            // char         유니코드 문자형    2byte           'a', 'b', '한', ... 단일
            // string       유니코드 문자열    측정불가         "abcde", "안녕", ...



            /*******************************************************************
             * 변수 variable
             * 
             * 데이터를 저장하기 위해 프로그램에 의해 이름을 할당받은 메모리 공간
             * 데이터를 저장할 수 있는 메모리 공간을 의미하며, 저장된 값은 변경 가능
             * *****************************************************************/

            int        iValue    = 10;
            //자료형    이름     10의 데이터를 초기화
              float    fValue;
            //자료형    이름

            int rValue = 20;
            int lValue = rValue;
            Console.WriteLine($"rValue 변수에 보관된 데이터는 {rValue} 입니다.");
            Console.WriteLine($"lValue 변수에 보관된 데이터는 {lValue} 입니다.");


            /*******************************************************************
             * 상수 Constant
             * 
             * 프로그램이 실행되는 동안 변경할 수 없는 데이터
             * 프로그램에서 값이 변경되기를 원하지 않는 데이터가 있을 경우 사용
             * 저장된 값은 프로그램 종료시까지 변경 불가능
             * *****************************************************************/

            const int MAX = 200;
            Console.WriteLine($"MAX 상수에 보관된 데이터는 {MAX} 입니다.");


            /*****************************************************************
             * 형변환 Casting
             *
             * 데이터를 선언한 자료형에 맞는 형태로 변환하는 작업
             * 다른 자료형의 데이터를 저장하기 위해선 형변환 과정을 거쳐야하며,
             * 이 과정에서 보관할 수 없는 데이터는 버려짐
             ******************************************************************/

            // float->int0 형변환 가능 단 (int)이라고 명시적 형변환을 해야함
            int Value = (int)1.2; // = 1

            


        }
    }
}
